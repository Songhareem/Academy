
# server port
server.port=80

## datasource 연결 정보
spring.datasource.username=user02
spring.datasource.password=user02
spring.datasource.url=jdbc:mysql://localhost:3306/user02
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

######## Hibernate 설정 ########
# 프로젝트 실행마다 테이블 생성
#spring.jpa.hibernate.ddl-auto=create
spring.jpa.hibernate.ddl-auto=update
## create 	: 기존 테이블 삭제 후 다시 생성
## create 	: create와 같으나 app 종료 시점에 table drop
## update 	: 변경된 부분만 적용
## validate : 엔티티(VO)와 테이블이 정상적으로 매핑되었는지 확인
## none		: 개발시, create, create-drop
## 운영시		: update, validate, none

### VO 클래스의 멤버변수명이 자동으로 DB컬럼명과 연결시,
## 멤버변수명이 snake_case 표기 (설정 필요 X)
## 멤버변수명이 camelCase 표기 (설정 필여)
spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl

### JPA에 의해서 자동으로 생성되고 실행되는 SQL문을 실시간으로 출력
logging.level.org.hibernate.sql=debug

### ? 에 매핑되는 파라미터 값을 출력
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE

### Hibernate가 실행한 SQL 출력
spring.jpa.show-sql=true

### sql 출력시 정렬
spring.jpa.properties.hibernate.format_sql=true

### transaction 처리
spring.aop.proxy-target-class=true


####### JSP 설정
spring.mvc.view.prefix=/WEB-INF/views/
spring.mvc.view.suffix=.jsp

######### mutipartFileResolver
# multipart 사용여부
spring.servlet.multipart.enabled=true
# 각 파일 당 최대 파일 크기
spring.servlet.multipart.max-file-size=10MB
# 총 파일 크기
spring.servlet.multipart.max-request-size=50MB

# 사용자 지정
board.member.filePath=upload/member
board.notice.filePath=upload/notice